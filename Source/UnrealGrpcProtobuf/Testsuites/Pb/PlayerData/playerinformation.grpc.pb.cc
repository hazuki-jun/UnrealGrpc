#pragma warning(push)

#pragma warning (disable : 4125)

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: playerinformation.proto

#include "playerinformation.pb.h"
#include "playerinformation.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace PlayerInformation {

static const char* Greeter_method_names[] = {
  "/PlayerInformation.Greeter/GetInformation",
  "/PlayerInformation.Greeter/SetInformation",
};

std::unique_ptr< Greeter::Stub> Greeter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Greeter::Stub> stub(new Greeter::Stub(channel));
  return stub;
}

Greeter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetInformation_(Greeter_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetInformation_(Greeter_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Greeter::Stub::GetInformation(::grpc::ClientContext* context, const ::PlayerInformation::GetInformationRequest& request, ::PlayerInformation::Information* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PlayerInformation::GetInformationRequest, ::PlayerInformation::Information, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetInformation_, context, request, response);
}

void Greeter::Stub::experimental_async::GetInformation(::grpc::ClientContext* context, const ::PlayerInformation::GetInformationRequest* request, ::PlayerInformation::Information* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PlayerInformation::GetInformationRequest, ::PlayerInformation::Information, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInformation_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetInformation(::grpc::ClientContext* context, const ::PlayerInformation::GetInformationRequest* request, ::PlayerInformation::Information* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInformation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PlayerInformation::Information>* Greeter::Stub::PrepareAsyncGetInformationRaw(::grpc::ClientContext* context, const ::PlayerInformation::GetInformationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::PlayerInformation::Information, ::PlayerInformation::GetInformationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetInformation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::PlayerInformation::Information>* Greeter::Stub::AsyncGetInformationRaw(::grpc::ClientContext* context, const ::PlayerInformation::GetInformationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetInformationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::SetInformation(::grpc::ClientContext* context, const ::PlayerInformation::Information& request, ::PlayerInformation::SetInformationReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PlayerInformation::Information, ::PlayerInformation::SetInformationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetInformation_, context, request, response);
}

void Greeter::Stub::experimental_async::SetInformation(::grpc::ClientContext* context, const ::PlayerInformation::Information* request, ::PlayerInformation::SetInformationReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PlayerInformation::Information, ::PlayerInformation::SetInformationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetInformation_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::SetInformation(::grpc::ClientContext* context, const ::PlayerInformation::Information* request, ::PlayerInformation::SetInformationReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetInformation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PlayerInformation::SetInformationReply>* Greeter::Stub::PrepareAsyncSetInformationRaw(::grpc::ClientContext* context, const ::PlayerInformation::Information& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::PlayerInformation::SetInformationReply, ::PlayerInformation::Information, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetInformation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::PlayerInformation::SetInformationReply>* Greeter::Stub::AsyncSetInformationRaw(::grpc::ClientContext* context, const ::PlayerInformation::Information& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetInformationRaw(context, request, cq);
  result->StartCall();
  return result;
}

Greeter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::PlayerInformation::GetInformationRequest, ::PlayerInformation::Information, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PlayerInformation::GetInformationRequest* req,
             ::PlayerInformation::Information* resp) {
               return service->GetInformation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::PlayerInformation::Information, ::PlayerInformation::SetInformationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PlayerInformation::Information* req,
             ::PlayerInformation::SetInformationReply* resp) {
               return service->SetInformation(ctx, req, resp);
             }, this)));
}

Greeter::Service::~Service() {
}

::grpc::Status Greeter::Service::GetInformation(::grpc::ServerContext* context, const ::PlayerInformation::GetInformationRequest* request, ::PlayerInformation::Information* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::SetInformation(::grpc::ServerContext* context, const ::PlayerInformation::Information* request, ::PlayerInformation::SetInformationReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace PlayerInformation



#pragma warning(pop)

