// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playerinformation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_playerinformation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_playerinformation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_playerinformation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_playerinformation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_playerinformation_2eproto;
namespace PlayerInformation {
class GetInformationRequest;
class GetInformationRequestDefaultTypeInternal;
extern GetInformationRequestDefaultTypeInternal _GetInformationRequest_default_instance_;
class Information;
class InformationDefaultTypeInternal;
extern InformationDefaultTypeInternal _Information_default_instance_;
class SetInformationReply;
class SetInformationReplyDefaultTypeInternal;
extern SetInformationReplyDefaultTypeInternal _SetInformationReply_default_instance_;
}  // namespace PlayerInformation
PROTOBUF_NAMESPACE_OPEN
template<> ::PlayerInformation::GetInformationRequest* Arena::CreateMaybeMessage<::PlayerInformation::GetInformationRequest>(Arena*);
template<> ::PlayerInformation::Information* Arena::CreateMaybeMessage<::PlayerInformation::Information>(Arena*);
template<> ::PlayerInformation::SetInformationReply* Arena::CreateMaybeMessage<::PlayerInformation::SetInformationReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PlayerInformation {

// ===================================================================

class Information PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerInformation.Information) */ {
 public:
  inline Information() : Information(nullptr) {}
  virtual ~Information();

  Information(const Information& from);
  Information(Information&& from) noexcept
    : Information() {
    *this = ::std::move(from);
  }

  inline Information& operator=(const Information& from) {
    CopyFrom(from);
    return *this;
  }
  inline Information& operator=(Information&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Information& default_instance();

  static inline const Information* internal_default_instance() {
    return reinterpret_cast<const Information*>(
               &_Information_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Information& a, Information& b) {
    a.Swap(&b);
  }
  inline void Swap(Information* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Information* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Information* New() const final {
    return CreateMaybeMessage<Information>(nullptr);
  }

  Information* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Information>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Information& from);
  void MergeFrom(const Information& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Information* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerInformation.Information";
  }
  protected:
  explicit Information(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_playerinformation_2eproto);
    return ::descriptor_table_playerinformation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPlayerNameFieldNumber = 2,
    kPlayerLevelFieldNumber = 3,
  };
  // string player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  void set_player_id(const std::string& value);
  void set_player_id(std::string&& value);
  void set_player_id(const char* value);
  void set_player_id(const char* value, size_t size);
  std::string* mutable_player_id();
  std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // string player_name = 2;
  void clear_player_name();
  const std::string& player_name() const;
  void set_player_name(const std::string& value);
  void set_player_name(std::string&& value);
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  std::string* mutable_player_name();
  std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // int32 player_level = 3;
  void clear_player_level();
  ::PROTOBUF_NAMESPACE_ID::int32 player_level() const;
  void set_player_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_level() const;
  void _internal_set_player_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerInformation.Information)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_playerinformation_2eproto;
};
// -------------------------------------------------------------------

class GetInformationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerInformation.GetInformationRequest) */ {
 public:
  inline GetInformationRequest() : GetInformationRequest(nullptr) {}
  virtual ~GetInformationRequest();

  GetInformationRequest(const GetInformationRequest& from);
  GetInformationRequest(GetInformationRequest&& from) noexcept
    : GetInformationRequest() {
    *this = ::std::move(from);
  }

  inline GetInformationRequest& operator=(const GetInformationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInformationRequest& operator=(GetInformationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInformationRequest& default_instance();

  static inline const GetInformationRequest* internal_default_instance() {
    return reinterpret_cast<const GetInformationRequest*>(
               &_GetInformationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetInformationRequest& a, GetInformationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInformationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInformationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInformationRequest* New() const final {
    return CreateMaybeMessage<GetInformationRequest>(nullptr);
  }

  GetInformationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInformationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInformationRequest& from);
  void MergeFrom(const GetInformationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInformationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerInformation.GetInformationRequest";
  }
  protected:
  explicit GetInformationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_playerinformation_2eproto);
    return ::descriptor_table_playerinformation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // string player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  void set_player_id(const std::string& value);
  void set_player_id(std::string&& value);
  void set_player_id(const char* value);
  void set_player_id(const char* value, size_t size);
  std::string* mutable_player_id();
  std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // @@protoc_insertion_point(class_scope:PlayerInformation.GetInformationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_playerinformation_2eproto;
};
// -------------------------------------------------------------------

class SetInformationReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerInformation.SetInformationReply) */ {
 public:
  inline SetInformationReply() : SetInformationReply(nullptr) {}
  virtual ~SetInformationReply();

  SetInformationReply(const SetInformationReply& from);
  SetInformationReply(SetInformationReply&& from) noexcept
    : SetInformationReply() {
    *this = ::std::move(from);
  }

  inline SetInformationReply& operator=(const SetInformationReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInformationReply& operator=(SetInformationReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetInformationReply& default_instance();

  static inline const SetInformationReply* internal_default_instance() {
    return reinterpret_cast<const SetInformationReply*>(
               &_SetInformationReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetInformationReply& a, SetInformationReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SetInformationReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInformationReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetInformationReply* New() const final {
    return CreateMaybeMessage<SetInformationReply>(nullptr);
  }

  SetInformationReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetInformationReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetInformationReply& from);
  void MergeFrom(const SetInformationReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetInformationReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerInformation.SetInformationReply";
  }
  protected:
  explicit SetInformationReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_playerinformation_2eproto);
    return ::descriptor_table_playerinformation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerInformation.SetInformationReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_playerinformation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Information

// string player_id = 1;
inline void Information::clear_player_id() {
  player_id_.ClearToEmpty();
}
inline const std::string& Information::player_id() const {
  // @@protoc_insertion_point(field_get:PlayerInformation.Information.player_id)
  return _internal_player_id();
}
inline void Information::set_player_id(const std::string& value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:PlayerInformation.Information.player_id)
}
inline std::string* Information::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:PlayerInformation.Information.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& Information::_internal_player_id() const {
  return player_id_.Get();
}
inline void Information::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Information::set_player_id(std::string&& value) {
  
  player_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlayerInformation.Information.player_id)
}
inline void Information::set_player_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlayerInformation.Information.player_id)
}
inline void Information::set_player_id(const char* value,
    size_t size) {
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlayerInformation.Information.player_id)
}
inline std::string* Information::_internal_mutable_player_id() {
  
  return player_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Information::release_player_id() {
  // @@protoc_insertion_point(field_release:PlayerInformation.Information.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Information::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlayerInformation.Information.player_id)
}

// string player_name = 2;
inline void Information::clear_player_name() {
  player_name_.ClearToEmpty();
}
inline const std::string& Information::player_name() const {
  // @@protoc_insertion_point(field_get:PlayerInformation.Information.player_name)
  return _internal_player_name();
}
inline void Information::set_player_name(const std::string& value) {
  _internal_set_player_name(value);
  // @@protoc_insertion_point(field_set:PlayerInformation.Information.player_name)
}
inline std::string* Information::mutable_player_name() {
  // @@protoc_insertion_point(field_mutable:PlayerInformation.Information.player_name)
  return _internal_mutable_player_name();
}
inline const std::string& Information::_internal_player_name() const {
  return player_name_.Get();
}
inline void Information::_internal_set_player_name(const std::string& value) {
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Information::set_player_name(std::string&& value) {
  
  player_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlayerInformation.Information.player_name)
}
inline void Information::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlayerInformation.Information.player_name)
}
inline void Information::set_player_name(const char* value,
    size_t size) {
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlayerInformation.Information.player_name)
}
inline std::string* Information::_internal_mutable_player_name() {
  
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Information::release_player_name() {
  // @@protoc_insertion_point(field_release:PlayerInformation.Information.player_name)
  return player_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Information::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlayerInformation.Information.player_name)
}

// int32 player_level = 3;
inline void Information::clear_player_level() {
  player_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::_internal_player_level() const {
  return player_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::player_level() const {
  // @@protoc_insertion_point(field_get:PlayerInformation.Information.player_level)
  return _internal_player_level();
}
inline void Information::_internal_set_player_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_level_ = value;
}
inline void Information::set_player_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_level(value);
  // @@protoc_insertion_point(field_set:PlayerInformation.Information.player_level)
}

// -------------------------------------------------------------------

// GetInformationRequest

// string player_id = 1;
inline void GetInformationRequest::clear_player_id() {
  player_id_.ClearToEmpty();
}
inline const std::string& GetInformationRequest::player_id() const {
  // @@protoc_insertion_point(field_get:PlayerInformation.GetInformationRequest.player_id)
  return _internal_player_id();
}
inline void GetInformationRequest::set_player_id(const std::string& value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:PlayerInformation.GetInformationRequest.player_id)
}
inline std::string* GetInformationRequest::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:PlayerInformation.GetInformationRequest.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& GetInformationRequest::_internal_player_id() const {
  return player_id_.Get();
}
inline void GetInformationRequest::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetInformationRequest::set_player_id(std::string&& value) {
  
  player_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlayerInformation.GetInformationRequest.player_id)
}
inline void GetInformationRequest::set_player_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlayerInformation.GetInformationRequest.player_id)
}
inline void GetInformationRequest::set_player_id(const char* value,
    size_t size) {
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlayerInformation.GetInformationRequest.player_id)
}
inline std::string* GetInformationRequest::_internal_mutable_player_id() {
  
  return player_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetInformationRequest::release_player_id() {
  // @@protoc_insertion_point(field_release:PlayerInformation.GetInformationRequest.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetInformationRequest::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlayerInformation.GetInformationRequest.player_id)
}

// -------------------------------------------------------------------

// SetInformationReply

// int32 player_id = 1;
inline void SetInformationReply::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetInformationReply::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetInformationReply::player_id() const {
  // @@protoc_insertion_point(field_get:PlayerInformation.SetInformationReply.player_id)
  return _internal_player_id();
}
inline void SetInformationReply::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void SetInformationReply::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:PlayerInformation.SetInformationReply.player_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PlayerInformation

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_playerinformation_2eproto
