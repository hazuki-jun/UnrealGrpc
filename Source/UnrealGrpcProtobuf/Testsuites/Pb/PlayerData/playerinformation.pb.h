// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playerinformation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_playerinformation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_playerinformation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_playerinformation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_playerinformation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_playerinformation_2eproto;
namespace PlayerInformation {
class GetInformationReply;
class GetInformationReplyDefaultTypeInternal;
extern GetInformationReplyDefaultTypeInternal _GetInformationReply_default_instance_;
class GetInformationRequest;
class GetInformationRequestDefaultTypeInternal;
extern GetInformationRequestDefaultTypeInternal _GetInformationRequest_default_instance_;
class Information;
class InformationDefaultTypeInternal;
extern InformationDefaultTypeInternal _Information_default_instance_;
class SetInformationReply;
class SetInformationReplyDefaultTypeInternal;
extern SetInformationReplyDefaultTypeInternal _SetInformationReply_default_instance_;
class SetInformationRequest;
class SetInformationRequestDefaultTypeInternal;
extern SetInformationRequestDefaultTypeInternal _SetInformationRequest_default_instance_;
}  // namespace PlayerInformation
PROTOBUF_NAMESPACE_OPEN
template<> ::PlayerInformation::GetInformationReply* Arena::CreateMaybeMessage<::PlayerInformation::GetInformationReply>(Arena*);
template<> ::PlayerInformation::GetInformationRequest* Arena::CreateMaybeMessage<::PlayerInformation::GetInformationRequest>(Arena*);
template<> ::PlayerInformation::Information* Arena::CreateMaybeMessage<::PlayerInformation::Information>(Arena*);
template<> ::PlayerInformation::SetInformationReply* Arena::CreateMaybeMessage<::PlayerInformation::SetInformationReply>(Arena*);
template<> ::PlayerInformation::SetInformationRequest* Arena::CreateMaybeMessage<::PlayerInformation::SetInformationRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PlayerInformation {

// ===================================================================

class Information PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerInformation.Information) */ {
 public:
  inline Information() : Information(nullptr) {}
  virtual ~Information();

  Information(const Information& from);
  Information(Information&& from) noexcept
    : Information() {
    *this = ::std::move(from);
  }

  inline Information& operator=(const Information& from) {
    CopyFrom(from);
    return *this;
  }
  inline Information& operator=(Information&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Information& default_instance();

  static inline const Information* internal_default_instance() {
    return reinterpret_cast<const Information*>(
               &_Information_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Information& a, Information& b) {
    a.Swap(&b);
  }
  inline void Swap(Information* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Information* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Information* New() const final {
    return CreateMaybeMessage<Information>(nullptr);
  }

  Information* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Information>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Information& from);
  void MergeFrom(const Information& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Information* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerInformation.Information";
  }
  protected:
  explicit Information(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_playerinformation_2eproto);
    return ::descriptor_table_playerinformation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayeridFieldNumber = 1,
    kPlayernameFieldNumber = 2,
    kPlayerlevelFieldNumber = 3,
  };
  // string playerid = 1;
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // string playername = 2;
  void clear_playername();
  const std::string& playername() const;
  void set_playername(const std::string& value);
  void set_playername(std::string&& value);
  void set_playername(const char* value);
  void set_playername(const char* value, size_t size);
  std::string* mutable_playername();
  std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // int32 playerlevel = 3;
  void clear_playerlevel();
  ::PROTOBUF_NAMESPACE_ID::int32 playerlevel() const;
  void set_playerlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerlevel() const;
  void _internal_set_playerlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerInformation.Information)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_playerinformation_2eproto;
};
// -------------------------------------------------------------------

class GetInformationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerInformation.GetInformationRequest) */ {
 public:
  inline GetInformationRequest() : GetInformationRequest(nullptr) {}
  virtual ~GetInformationRequest();

  GetInformationRequest(const GetInformationRequest& from);
  GetInformationRequest(GetInformationRequest&& from) noexcept
    : GetInformationRequest() {
    *this = ::std::move(from);
  }

  inline GetInformationRequest& operator=(const GetInformationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInformationRequest& operator=(GetInformationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInformationRequest& default_instance();

  static inline const GetInformationRequest* internal_default_instance() {
    return reinterpret_cast<const GetInformationRequest*>(
               &_GetInformationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetInformationRequest& a, GetInformationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInformationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInformationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInformationRequest* New() const final {
    return CreateMaybeMessage<GetInformationRequest>(nullptr);
  }

  GetInformationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInformationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInformationRequest& from);
  void MergeFrom(const GetInformationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInformationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerInformation.GetInformationRequest";
  }
  protected:
  explicit GetInformationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_playerinformation_2eproto);
    return ::descriptor_table_playerinformation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayeridFieldNumber = 1,
  };
  // string playerid = 1;
  void clear_playerid();
  const std::string& playerid() const;
  void set_playerid(const std::string& value);
  void set_playerid(std::string&& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  std::string* mutable_playerid();
  std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // @@protoc_insertion_point(class_scope:PlayerInformation.GetInformationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_playerinformation_2eproto;
};
// -------------------------------------------------------------------

class GetInformationReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerInformation.GetInformationReply) */ {
 public:
  inline GetInformationReply() : GetInformationReply(nullptr) {}
  virtual ~GetInformationReply();

  GetInformationReply(const GetInformationReply& from);
  GetInformationReply(GetInformationReply&& from) noexcept
    : GetInformationReply() {
    *this = ::std::move(from);
  }

  inline GetInformationReply& operator=(const GetInformationReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInformationReply& operator=(GetInformationReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInformationReply& default_instance();

  static inline const GetInformationReply* internal_default_instance() {
    return reinterpret_cast<const GetInformationReply*>(
               &_GetInformationReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetInformationReply& a, GetInformationReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInformationReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInformationReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInformationReply* New() const final {
    return CreateMaybeMessage<GetInformationReply>(nullptr);
  }

  GetInformationReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInformationReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInformationReply& from);
  void MergeFrom(const GetInformationReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInformationReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerInformation.GetInformationReply";
  }
  protected:
  explicit GetInformationReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_playerinformation_2eproto);
    return ::descriptor_table_playerinformation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .PlayerInformation.Information info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::PlayerInformation::Information& info() const;
  ::PlayerInformation::Information* release_info();
  ::PlayerInformation::Information* mutable_info();
  void set_allocated_info(::PlayerInformation::Information* info);
  private:
  const ::PlayerInformation::Information& _internal_info() const;
  ::PlayerInformation::Information* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::PlayerInformation::Information* info);
  ::PlayerInformation::Information* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:PlayerInformation.GetInformationReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlayerInformation::Information* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_playerinformation_2eproto;
};
// -------------------------------------------------------------------

class SetInformationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerInformation.SetInformationRequest) */ {
 public:
  inline SetInformationRequest() : SetInformationRequest(nullptr) {}
  virtual ~SetInformationRequest();

  SetInformationRequest(const SetInformationRequest& from);
  SetInformationRequest(SetInformationRequest&& from) noexcept
    : SetInformationRequest() {
    *this = ::std::move(from);
  }

  inline SetInformationRequest& operator=(const SetInformationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInformationRequest& operator=(SetInformationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetInformationRequest& default_instance();

  static inline const SetInformationRequest* internal_default_instance() {
    return reinterpret_cast<const SetInformationRequest*>(
               &_SetInformationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetInformationRequest& a, SetInformationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetInformationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInformationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetInformationRequest* New() const final {
    return CreateMaybeMessage<SetInformationRequest>(nullptr);
  }

  SetInformationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetInformationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetInformationRequest& from);
  void MergeFrom(const SetInformationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetInformationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerInformation.SetInformationRequest";
  }
  protected:
  explicit SetInformationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_playerinformation_2eproto);
    return ::descriptor_table_playerinformation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .PlayerInformation.Information info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::PlayerInformation::Information& info() const;
  ::PlayerInformation::Information* release_info();
  ::PlayerInformation::Information* mutable_info();
  void set_allocated_info(::PlayerInformation::Information* info);
  private:
  const ::PlayerInformation::Information& _internal_info() const;
  ::PlayerInformation::Information* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::PlayerInformation::Information* info);
  ::PlayerInformation::Information* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:PlayerInformation.SetInformationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PlayerInformation::Information* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_playerinformation_2eproto;
};
// -------------------------------------------------------------------

class SetInformationReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerInformation.SetInformationReply) */ {
 public:
  inline SetInformationReply() : SetInformationReply(nullptr) {}
  virtual ~SetInformationReply();

  SetInformationReply(const SetInformationReply& from);
  SetInformationReply(SetInformationReply&& from) noexcept
    : SetInformationReply() {
    *this = ::std::move(from);
  }

  inline SetInformationReply& operator=(const SetInformationReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInformationReply& operator=(SetInformationReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetInformationReply& default_instance();

  static inline const SetInformationReply* internal_default_instance() {
    return reinterpret_cast<const SetInformationReply*>(
               &_SetInformationReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetInformationReply& a, SetInformationReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SetInformationReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInformationReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetInformationReply* New() const final {
    return CreateMaybeMessage<SetInformationReply>(nullptr);
  }

  SetInformationReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetInformationReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetInformationReply& from);
  void MergeFrom(const SetInformationReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetInformationReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerInformation.SetInformationReply";
  }
  protected:
  explicit SetInformationReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_playerinformation_2eproto);
    return ::descriptor_table_playerinformation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerInformation.SetInformationReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_playerinformation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Information

// string playerid = 1;
inline void Information::clear_playerid() {
  playerid_.ClearToEmpty();
}
inline const std::string& Information::playerid() const {
  // @@protoc_insertion_point(field_get:PlayerInformation.Information.playerid)
  return _internal_playerid();
}
inline void Information::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:PlayerInformation.Information.playerid)
}
inline std::string* Information::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:PlayerInformation.Information.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& Information::_internal_playerid() const {
  return playerid_.Get();
}
inline void Information::_internal_set_playerid(const std::string& value) {
  
  playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Information::set_playerid(std::string&& value) {
  
  playerid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlayerInformation.Information.playerid)
}
inline void Information::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlayerInformation.Information.playerid)
}
inline void Information::set_playerid(const char* value,
    size_t size) {
  
  playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlayerInformation.Information.playerid)
}
inline std::string* Information::_internal_mutable_playerid() {
  
  return playerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Information::release_playerid() {
  // @@protoc_insertion_point(field_release:PlayerInformation.Information.playerid)
  return playerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Information::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    
  } else {
    
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlayerInformation.Information.playerid)
}

// string playername = 2;
inline void Information::clear_playername() {
  playername_.ClearToEmpty();
}
inline const std::string& Information::playername() const {
  // @@protoc_insertion_point(field_get:PlayerInformation.Information.playername)
  return _internal_playername();
}
inline void Information::set_playername(const std::string& value) {
  _internal_set_playername(value);
  // @@protoc_insertion_point(field_set:PlayerInformation.Information.playername)
}
inline std::string* Information::mutable_playername() {
  // @@protoc_insertion_point(field_mutable:PlayerInformation.Information.playername)
  return _internal_mutable_playername();
}
inline const std::string& Information::_internal_playername() const {
  return playername_.Get();
}
inline void Information::_internal_set_playername(const std::string& value) {
  
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Information::set_playername(std::string&& value) {
  
  playername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlayerInformation.Information.playername)
}
inline void Information::set_playername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlayerInformation.Information.playername)
}
inline void Information::set_playername(const char* value,
    size_t size) {
  
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlayerInformation.Information.playername)
}
inline std::string* Information::_internal_mutable_playername() {
  
  return playername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Information::release_playername() {
  // @@protoc_insertion_point(field_release:PlayerInformation.Information.playername)
  return playername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Information::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    
  } else {
    
  }
  playername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlayerInformation.Information.playername)
}

// int32 playerlevel = 3;
inline void Information::clear_playerlevel() {
  playerlevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::_internal_playerlevel() const {
  return playerlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::playerlevel() const {
  // @@protoc_insertion_point(field_get:PlayerInformation.Information.playerlevel)
  return _internal_playerlevel();
}
inline void Information::_internal_set_playerlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerlevel_ = value;
}
inline void Information::set_playerlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerlevel(value);
  // @@protoc_insertion_point(field_set:PlayerInformation.Information.playerlevel)
}

// -------------------------------------------------------------------

// GetInformationRequest

// string playerid = 1;
inline void GetInformationRequest::clear_playerid() {
  playerid_.ClearToEmpty();
}
inline const std::string& GetInformationRequest::playerid() const {
  // @@protoc_insertion_point(field_get:PlayerInformation.GetInformationRequest.playerid)
  return _internal_playerid();
}
inline void GetInformationRequest::set_playerid(const std::string& value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:PlayerInformation.GetInformationRequest.playerid)
}
inline std::string* GetInformationRequest::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:PlayerInformation.GetInformationRequest.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& GetInformationRequest::_internal_playerid() const {
  return playerid_.Get();
}
inline void GetInformationRequest::_internal_set_playerid(const std::string& value) {
  
  playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetInformationRequest::set_playerid(std::string&& value) {
  
  playerid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlayerInformation.GetInformationRequest.playerid)
}
inline void GetInformationRequest::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PlayerInformation.GetInformationRequest.playerid)
}
inline void GetInformationRequest::set_playerid(const char* value,
    size_t size) {
  
  playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlayerInformation.GetInformationRequest.playerid)
}
inline std::string* GetInformationRequest::_internal_mutable_playerid() {
  
  return playerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetInformationRequest::release_playerid() {
  // @@protoc_insertion_point(field_release:PlayerInformation.GetInformationRequest.playerid)
  return playerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetInformationRequest::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    
  } else {
    
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlayerInformation.GetInformationRequest.playerid)
}

// -------------------------------------------------------------------

// GetInformationReply

// .PlayerInformation.Information info = 1;
inline bool GetInformationReply::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool GetInformationReply::has_info() const {
  return _internal_has_info();
}
inline void GetInformationReply::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::PlayerInformation::Information& GetInformationReply::_internal_info() const {
  const ::PlayerInformation::Information* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerInformation::Information&>(
      ::PlayerInformation::_Information_default_instance_);
}
inline const ::PlayerInformation::Information& GetInformationReply::info() const {
  // @@protoc_insertion_point(field_get:PlayerInformation.GetInformationReply.info)
  return _internal_info();
}
inline void GetInformationReply::unsafe_arena_set_allocated_info(
    ::PlayerInformation::Information* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerInformation.GetInformationReply.info)
}
inline ::PlayerInformation::Information* GetInformationReply::release_info() {
  
  ::PlayerInformation::Information* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlayerInformation::Information* GetInformationReply::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:PlayerInformation.GetInformationReply.info)
  
  ::PlayerInformation::Information* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::PlayerInformation::Information* GetInformationReply::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerInformation::Information>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::PlayerInformation::Information* GetInformationReply::mutable_info() {
  // @@protoc_insertion_point(field_mutable:PlayerInformation.GetInformationReply.info)
  return _internal_mutable_info();
}
inline void GetInformationReply::set_allocated_info(::PlayerInformation::Information* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:PlayerInformation.GetInformationReply.info)
}

// -------------------------------------------------------------------

// SetInformationRequest

// .PlayerInformation.Information info = 1;
inline bool SetInformationRequest::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SetInformationRequest::has_info() const {
  return _internal_has_info();
}
inline void SetInformationRequest::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::PlayerInformation::Information& SetInformationRequest::_internal_info() const {
  const ::PlayerInformation::Information* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerInformation::Information&>(
      ::PlayerInformation::_Information_default_instance_);
}
inline const ::PlayerInformation::Information& SetInformationRequest::info() const {
  // @@protoc_insertion_point(field_get:PlayerInformation.SetInformationRequest.info)
  return _internal_info();
}
inline void SetInformationRequest::unsafe_arena_set_allocated_info(
    ::PlayerInformation::Information* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerInformation.SetInformationRequest.info)
}
inline ::PlayerInformation::Information* SetInformationRequest::release_info() {
  
  ::PlayerInformation::Information* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlayerInformation::Information* SetInformationRequest::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:PlayerInformation.SetInformationRequest.info)
  
  ::PlayerInformation::Information* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::PlayerInformation::Information* SetInformationRequest::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerInformation::Information>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::PlayerInformation::Information* SetInformationRequest::mutable_info() {
  // @@protoc_insertion_point(field_mutable:PlayerInformation.SetInformationRequest.info)
  return _internal_mutable_info();
}
inline void SetInformationRequest::set_allocated_info(::PlayerInformation::Information* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:PlayerInformation.SetInformationRequest.info)
}

// -------------------------------------------------------------------

// SetInformationReply

// int32 result = 1;
inline void SetInformationReply::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetInformationReply::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetInformationReply::result() const {
  // @@protoc_insertion_point(field_get:PlayerInformation.SetInformationReply.result)
  return _internal_result();
}
inline void SetInformationReply::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void SetInformationReply::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PlayerInformation.SetInformationReply.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PlayerInformation

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_playerinformation_2eproto
